import asyncio
import ccxt
import ccxt.pro as ccxtpro
import pprint
from typing import Dict, Any

class KuCoinBalanceWatcher:
    def __init__(self, api_key: str, secret: str, password: str):
        self.exchange = ccxtpro.kucoin({
            'apiKey': api_key,
            'secret': secret,
            'password': password,
            'sandbox': False,
        })
        
        self.previous_balance = {}
        
    async def on_usdt_increase(self, currency: str, old_amount: float, new_amount: float, difference: float):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ USDT
        """
        print(f"üéØ USDT BALANCE INCREASED!")
        print(f"   Currency: {currency}")
        print(f"   Previous: {old_amount:.6f}")
        print(f"   Current:  {new_amount:.6f}")
        print(f"   Added:    {difference:.6f} USDT")
        print("-" * 50)
        
    async def on_other_currency_increase(self, currency: str, old_amount: float, new_amount: float, difference: float):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –≤–∞–ª—é—Ç—ã (–∫—Ä–æ–º–µ USDT)
        """
        print(f"üí∞ OTHER CURRENCY BALANCE INCREASED!")
        print(f"   Currency: {currency}")
        print(f"   Previous: {old_amount:.6f}")
        print(f"   Current:  {new_amount:.6f}")
        print(f"   Added:    {difference:.6f} {currency}")
        print("-" * 50)
        
    def _parse_balance_update(self, balance_data):
        """
        –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ WebSocket
        """
        if isinstance(balance_data, dict):
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ccxt
            if 'total' in balance_data:
                return balance_data['total']
            elif 'info' in balance_data:
                # –ü—Ä—è–º–æ–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç –±–∏—Ä–∂–∏
                info = balance_data['info']
                if 'data' in info:
                    return self._parse_kucoin_balance_data(info['data'])
        return balance_data
    
    def _parse_kucoin_balance_data(self, data):
        """
        –ü–∞—Ä—Å–∏–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç KuCoin
        """
        balance = {}
        if isinstance(data, dict):
            for currency, amount in data.items():
                if isinstance(amount, (int, float)):
                    balance[currency] = amount
                elif isinstance(amount, dict):
                    balance[currency] = amount.get('available', 0) + amount.get('hold', 0)
        return balance
    
    def _calculate_balance_changes(self, new_balance_raw):
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        """
        new_balance = self._parse_balance_update(new_balance_raw)
        changes = {}
        
        if not isinstance(new_balance, dict):
            print(f"‚ö†Ô∏è Unexpected balance format: {type(new_balance)}")
            return changes
        
        for currency, new_amount in new_balance.items():
            if not isinstance(new_amount, (int, float)):
                continue
                
            old_amount = self.previous_balance.get(currency, 0)
            
            if new_amount != old_amount:
                changes[currency] = {
                    'old_amount': old_amount,
                    'new_amount': new_amount,
                    'difference': new_amount - old_amount
                }
                
        return changes
    
    async def watch_balance_forever(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –±–∞–ª–∞–Ω—Å–∞
        """
        print("üöÄ Starting KuCoin balance watcher...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            initial_balance = await self.exchange.fetch_balance()
            self.previous_balance = initial_balance['total']
            print("‚úÖ Initial balance loaded")
            print(f"üìä Initial USDT: {self.previous_balance.get('USDT', 0):.6f}")
            
            while True:
                try:
                    # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ WebSocket
                    balance_update = await self.exchange.watch_balance()
                    print(f"üì° Received balance update: {type(balance_update)}")
                    # print(balance_update)
                    pprint.pprint(balance_update)
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    changes = self._calculate_balance_changes(balance_update)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    for currency, change_info in changes.items():
                        difference = change_info['difference']
                        
                        if difference > 0:  # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è
                            if currency == 'USDT':
                                await self.on_usdt_increase(
                                    currency=currency,
                                    old_amount=change_info['old_amount'],
                                    new_amount=change_info['new_amount'],
                                    difference=difference
                                )
                            else:
                                await self.on_other_currency_increase(
                                    currency=currency,
                                    old_amount=change_info['old_amount'],
                                    new_amount=change_info['new_amount'],
                                    difference=difference
                                )
                        elif difference < 0:  # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–∏–ª—Å—è
                            print(f"üîª {currency} decreased: {change_info['old_amount']:.6f} -> {change_info['new_amount']:.6f} (diff: {difference:.6f})")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–∞–ª–∞–Ω—Å
                    if changes:
                        for currency, change_info in changes.items():
                            self.previous_balance[currency] = change_info['new_amount']
                    
                except Exception as e:
                    print(f"‚ùå Error in balance watch loop: {e}")
                    print(f"Error type: {type(e)}")
                    import traceback
                    traceback.print_exc()
                    await asyncio.sleep(5)
                    
        except Exception as e:
            print(f"‚ùå Failed to start balance watcher: {e}")
            import traceback
            traceback.print_exc()
            
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        await self.exchange.close()


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®–ò –†–ï–ê–õ–¨–ù–´–ï –ö–õ–Æ–ß–ò!
    API_KEY = "68eba1be03ad1c00011b0a37"
    SECRET = "e3d6c2ad-6ac3-4ae7-a605-28b59d937453"
    PASSWORD = "rABSQCS5XR5ubqh"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å
    watcher = KuCoinBalanceWatcher(API_KEY, SECRET, PASSWORD)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–µ—Ä (–±–µ–∑ —Å–¥–µ–ª–æ–∫)
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
        # await tester.simulate_activity()
        
        # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å
        print("\nüéØ Starting balance watcher...")
        await watcher.watch_balance_forever()
        
    except KeyboardInterrupt:
        print("\nüõë Stopping balance watcher...")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    finally:
        await watcher.close()

if __name__ == "__main__":
    asyncio.run(main())